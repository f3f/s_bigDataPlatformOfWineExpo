/*require("./modules/bubble-cloud.js");
 var categories = [
 {
 name: "A",
 color: "#3f95ff"
 }, {
 name: "B",
 color: "#ff7e00"
 }, {
 name: "C",
 color: "#ff3f75"
 }, {
 name: "D",
 color: "#d83aff"
 }, {
 name: "E",
 color: "#1ee7c6"
 }, {
 name: "F",
 color: "#fffa66"
 }];
 var width = 210;
 var height = 210;
 var data = [];
 data.push({
 name: "茅台",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "白酒",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "郎酒",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "五粮液",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "五粮液",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "茅台",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 data.push({
 name: "郎酒",
 size: 1 + Math.random() * 50,
 group: categories[Math.floor(Math.random() * 6)].name
 });
 var chart1 = new BubbleCloudChart(document.getElementById("bubbleCloud"), width, height);
 chart1.categories = categories;

 chart1.clickHandler = function (d) {
 };
 chart1.init();
 chart1.data(data);*/
(function (b) {
    if (typeof d3 === "undefined") {
        throw new Error("Please include D3.js Library first.")
    }
    function a(e, c, d) {
        var f = this;
        f.domElement = e;
        f.width = c;
        f.height = d;
        f._force = d3.forceSimulation()
    }

    a.prototype = {
        constructor: a,
        padding: {left: 10, right: 10, top: 15, bottom: 5},
        domElement: null,
        width: 80,
        height: 100,
        minRadius: 3,
        maxRadius: 6,
        minFontSize: 12,
        maxFontSize: 15,
        categories: null,
        labelFunction: function (c) {
            return c.name
        },
        weightFunction: function (c) {
            return c.size
        },
        categoryFunction: function (c) {
            return c.group
        },
        clickHandler: null,
        customDrawFunction: function (f, h, c, e) {
            f.append("circle").attr("r", c).style("fill", e).style("opacity", "0")
        },
        collisionPadding: 10,
        minCollisionRadius: 15,
        iconPadding: 150,
        _jitter: 0.618,
        _force: null,
        _categoryMap: null,
        _svg: null,
        _ballGroup: null,
        _bubbles: null,
        _legend: null,
        _radiusScale: null,
        _fontSizeScale: null,
        _width: 0,
        _height: 0,
        init: function () {
            var c = this;
            c._width = c.width - c.padding.right - c.padding.left;
            c._height = c.height - c.padding.top - c.padding.bottom;
            c._radiusScale = d3.scaleLinear().range([c.minRadius, c.maxRadius]);
            c._fontSizeScale = d3.scaleLinear().range([c.minFontSize, c.maxFontSize]);
            c._force.force("center", d3.forceCenter(c._width / 2, c._height / 2));
            d3.select(c.domElement).selectAll().remove();
            c._svg = d3.select(c.domElement).append("svg").attr("width", c.width).attr("height", c.height);
            c._categoryMap = {};
            if (c.categories) {
                c.categories.forEach(function (d) {
                    c._categoryMap[d.name] = d
                })
            }
        },
        _data: null,
        data: function (e) {
            var d = this;
            if (arguments.length < 1) {
                return d._data
            }
            d._data = e;
            var g = d.labelFunction || function (h) {
                    return h.label || ""
                };
            var f = d.weightFunction || function (h) {
                    return h._weight || 1
                };
            var c = d.categoryFunction || function (h) {
                    return h.category || ""
                };
            d._radiusScale.domain([d3.min(d._data, f), d3.max(d._data, f)]);
            d._fontSizeScale.domain([d3.min(d._data, f), d3.max(d._data, f)]);
            d._svg.selectAll(".node").remove();
            d._ballGroup = d._svg.append("g").attr("transform", "translate(" + d.padding.left + "," + d.padding.top + ")").attr("class", "node");
            d._bubbles = d._ballGroup.selectAll("g").data(d._data).enter().append("g").style("cursor", "pointer").on("click", function (h) {
                if (d.clickHandler instanceof Function) {
                    d.clickHandler.call(null, h)
                }
            });
            d._bubbles.each(function (j) {
                var h = d._radiusScale(f(j));
                var k = d._categoryMap[c(j)];
                var i = k ? k.color : "#000000";
                return d.customDrawFunction(d3.select(this), j, h, i)
            });
            d._bubbles.append("text").attr("text-anchor", "middle").attr("dy", ".3em").attr("font-size", function (h) {
                return d._fontSizeScale(f(h))
            }).attr("fill", function (h) {
                return d._getColor(h.group)
            }).attr("font-family", "微软雅黑").attr("font-weight", "bold").text(g);
            this._data.forEach(function (j, h) {
                j.fr = Math.max(d.minCollisionRadius, d._radiusScale(f(j)))
            });
            d._force.nodes(this._data).on("tick", function () {
                d._force_tickHandler.bind(d)(this);
                d._bubbles.attr("transform", function (h) {
                    return "translate(" + h.x + "," + h.y + ")"
                })
            }).on("end", function () {
                d._bubbles.attr("transform", function (h) {
                    return "translate(" + h.x + "," + h.y + ")"
                })
            });
            while (d._force.alpha() > d._force.alphaMin()) {
                d._force.tick();
                d._force_tickHandler()
            }
        },
        _getColor: function (e) {
            var d = this;
            for (var c = 0; c < d.categories.length; c++) {
                if (e == d.categories[c].name) {
                    return d.categories[c].color
                }
            }
        },
        _force_tickHandler: function () {
            var c = this;
            c._bubbles.each(c._gravity(c._force.alpha() * 0.1)).each(this._collide(c._jitter))
        },
        _gravity: function (d) {
            var c = this._width / 2;
            var g = this._height / 2;
            var f = d;
            var e = d * 0.55;
            return function (h) {
                h.x += (c - h.x) * f;
                h.y += (g - h.y) * e
            }
        },
        _collide: function (c) {
            var e = this._data;
            var d = this.collisionPadding;
            return function (f) {
                e.forEach(function (j) {
                    if (f !== j) {
                        var g = f.x - j.x;
                        var m = f.y - j.y;
                        var h = Math.sqrt(g * g + m * m);
                        var i = f.fr + j.fr + d;
                        if (h < i) {
                            h = (h - i) / h * c;
                            var l = g * h;
                            var k = m * h;
                            f.x -= l;
                            f.y -= k;
                            j.x += l;
                            j.y += k
                        }
                    }
                })
            }
        }
    };
    if (b) {
        b.BubbleCloudChart = a
    }
})(window);